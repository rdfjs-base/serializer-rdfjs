exports["Serializer transform should generate module when the type is undefined"] = `/* This file was automatically generated. Do not edit by hand. */

const {
  ns1
} = {
  'ns1': 'http://example.org/'
}

module.exports = ({ blankNode, literal, namedNode, quad }) => {
  const blankNodes = []
  for (let i = 0; i < 1; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      blankNodes['0'],
      namedNode(\`\${ns1}predicate1\`),
      literal(\`object\`)
    )
  ]
}
`;

exports["Serializer transform should generate module when the type is commonjs"] = `/* This file was automatically generated. Do not edit by hand. */

const {
  ns1
} = {
  'ns1': 'http://example.org/'
}

module.exports = ({ blankNode, literal, namedNode, quad }) => {
  const blankNodes = []
  for (let i = 0; i < 1; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      blankNodes['0'],
      namedNode(\`\${ns1}predicate1\`),
      literal(\`object\`)
    )
  ]
}
`;

exports["Serializer transform should generate module when the type is esm"] = `/* This file was automatically generated. Do not edit by hand. */

const {
  ns1
} = {
  'ns1': 'http://example.org/'
}

export const dataset = ({ blankNode, literal, namedNode, quad }) => {
  const blankNodes = []
  for (let i = 0; i < 1; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      blankNodes['0'],
      namedNode(\`\${ns1}predicate1\`),
      literal(\`object\`)
    )
  ]
}
`;

exports["Serializer transform should generate module when the type is ts"] = `/* This file was automatically generated. Do not edit by hand. */

const {
  ns1
} = {
  'ns1': 'http://example.org/'
}

import { DataFactory, Quad } from 'rdf-js'

export const dataset = ({ blankNode, literal, namedNode, quad }: DataFactory): Quad[] => {
  const blankNodes = []
  for (let i = 0; i < 1; i++) {
    blankNodes.push(blankNode())
  }

  return [
    quad(
      blankNodes['0'],
      namedNode(\`\${ns1}predicate1\`),
      literal(\`object\`)
    )
  ]
}
`;

